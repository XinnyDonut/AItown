## map
### map generation and load
- generated by Tiles(http://www.mapeditor.org)
  >crash on macbook for some reason
- converted to JSON files using Tiles
- convert by ```./data/convertMap.js/``` to js file
  ```
  node data/convertMap.js <mapDataPath> <assetPath> <tilesetpxw> <tilesetpxh>
  ```
- load from init.js

  ```just convex run testing:wipeAllTables```

  ```just convex run init```

  ``` npm run dev:backend```

### map editor
- an editor in ```/src/editor/``` that you can run ```npm run le``` to edit at http://localhost:5174
- more info at ```./src/editor/README.md```
- probably not very important?

### map data composition
- tilesetpath = "/ai-town/assets/gentle-obj.png" ```#tilepath```
- tiledim =32 ```#tile dimension#```
- screenxtiles = 45 ```# how many tiles by width```
- screenytiles = 32 ```# how many tiles by height```
- tilesetpxw = 1440 ```# how many tiles in pix by width```
- tilesetpxh = 1024 ```# how many tiles in pix by height```
- bgtiles=```[[],[]]``` ```# background layer```
- objmap =```[[],[]]``` ```# object layer```
- animatedspirites=[] ```#animations```
- mapwidth
- mapheight

### related code to load map 
```./convex/aiTown/worldMap.ts/```
```
export class WorldMap {
  width: number;
  height: number;

  tileSetUrl: string;
  tileSetDimX: number;
  tileSetDimY: number;

  tileDim: number;

  bgTiles: TileLayer[];
  objectTiles: TileLayer[];
  animatedSprites: AnimatedSprite[];

  constructor(serialized: SerializedWorldMap) {
    this.width = serialized.width;
    this.height = serialized.height;
    this.tileSetUrl = serialized.tileSetUrl;
    this.tileSetDimX = serialized.tileSetDimX;
    this.tileSetDimY = serialized.tileSetDimY;
    this.tileDim = serialized.tileDim;
    this.bgTiles = serialized.bgTiles;
    this.objectTiles = serialized.objectTiles;
    this.animatedSprites = serialized.animatedSprites;
  }
}

```

### Conclusion 
1. map json file is too large
2. it's difficult for user to configure map layers

### Possible solution 
example json file:
```
// config.json - Just reference which map to use
{
  "world": {
    "width": 32,
    "height": 32,
    "tileDimension": 32,
    "tileSetUrl": "/assets/32x32folk.png",
    "mapName": "gentle.js"  // only reference which converted map to use
  },
  "agents": [
    {
      "id": "agent1",
      "name": "Alice",
      "identity": "A friendly gardener",
      "plan": "Walk around greeting people"
    }
  ],
  "mechanics": {
    "conversationDistance": 2,
    "maxConversationDuration": 300000
  }
}

// gentle.js - the actual map data is separate
export const bgtiles = [
    //large background tile arrays 
];
export const objmap = [
    // large object map arrays
];
```

### Possible workflow 
1. Edit map in Tiled
2. Export as JSON 
3. Use convertMap.js to create gentle.js (or other map file)
4. or skip 1,2,3 and  just use existing maps!
5. Edit config.json to specify which map to use and other settings(characters...constants...)
6. The loader loads them when the game starts(need to figure out the loader func)

### Possible JSON loading flow
1. Use config.json to contains all our customizable settings
2. When AI Town starts up, it runs the initialization process (```init.ts```)
3. During initialization, first load our configuration
4. Then use those configuration values instead of hardcoded ones to set up the world
5. now need to figure out how 

### potential structure
```
AI-TOWN/
  ├── config.json         (configuration file)
  ├── maps/
  │   ├── gentle.js        (converted from Tiled,or already existing)
  │   └── other-maps.js    (other converted maps)
  ├── config-loader.js     (need to figure out)
  └── ... other files
  ```


